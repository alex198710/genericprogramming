#ifndef PPS_MULTI_ARRAY_DIMENSIONS_H#define PPS_MULTI_ARRAY_DIMENSIONS_H#include <list>#include "multi_array_range.h"namespace pps {namespace multi_array {class dimensions	: public range<std::list<std::size_t>>{	public:		typedef range<std::list<std::size_t>>::constIterator constIterator;		typedef range<std::list<std::size_t>>::iterator iterator;	private:		std::list<std::size_t> m_data;	public:		dimensions();		dimensions(const dimensions& p_dimensions);		dimensions& operator=(const dimensions& p_dimensions);		dimensions& operator[](const std::size_t& p_dimension);		inline virtual constIterator begin() const;		inline virtual iterator begin();		inline virtual constIterator end() const;		inline virtual iterator end();};}}namespace pps {namespace multi_array {inline dimensions::constIterator dimensions::begin() const{	return m_data.begin();}inline dimensions::iterator dimensions::begin(){	return m_data.begin();}inline dimensions::constIterator dimensions::end() const{	return m_data.end();}inline dimensions::iterator dimensions::end(){	return m_data.end();}}}#endif