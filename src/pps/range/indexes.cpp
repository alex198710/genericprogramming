#include "../../../include/pps/range/indexes.h"namespace pps {namespace range {indexes::indexes(){}indexes::indexes(const indexes& p_indexes): m_data(p_indexes.m_data){}indexes& indexes::operator=(const indexes& p_indexes){	if(&p_indexes == this)		return *this;	m_data = p_indexes.m_data;	return *this;}typename indexes::constIterator indexes::begin() const{	return m_data.begin();}typename indexes::iterator indexes::begin(){	return m_data.begin();}typename indexes::constIterator indexes::end() const{	return m_data.end();}typename indexes::iterator indexes::end(){	return m_data.end();}indexes& indexes::operator[](std::size_t p_index){	m_data.push_back(p_index);	return *this;}// ---- Extending library to support indexes as a rangetypename traits<indexes>::constIteratorbegin(const indexes& p_range){	return p_range.begin();}typename traits<indexes>::iteratorbegin(indexes& p_range){	return p_range.begin();}typename traits<indexes>::constIteratorend(const indexes& p_range){	return p_range.end();}typename traits<indexes>::iteratorend(indexes& p_range){	return p_range.end();}}}