#include <typeinfo>#include <vector>#include "tests.h"#include "../multi_array_traits_baseType.h"using pps::multi_array::traits_baseType;namespace pps {namespace multi_array {template<class T>struct traits_baseType<std::vector<T>>{	typedef typename traits_baseType<T>::type type;};}}int main(){	PPS_TESTS_ASSERT(typeid(traits_baseType<int>::type) == typeid(int));	PPS_TESTS_ASSERT(typeid(traits_baseType<int*>::type) == typeid(int));	PPS_TESTS_ASSERT(typeid(traits_baseType<int**>::type) == typeid(int));	PPS_TESTS_ASSERT(typeid(traits_baseType<double***>::type) == typeid(double));	PPS_TESTS_ASSERT(typeid(traits_baseType<std::vector<double>>::type) == typeid(double));	PPS_TESTS_ASSERT(typeid(traits_baseType<std::vector<std::vector<double>>>::type) == typeid(double));	PPS_TESTS_ASSERT(typeid(traits_baseType<std::vector<std::vector<double>*>>::type) == typeid(double));	return 0;}