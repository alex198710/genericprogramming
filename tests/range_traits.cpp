#include <typeinfo>#include <vector>#include "tests.h"#include "../include/pps/range/traits.h"using pps::range::traits;/*	A class acting as an array of integers.	This class is voluntary not registered by	specialization into the system to test	static_assert.*/class NonRegistered{};/*	A class acting as an array of integers.	This class is registered into the system,	so we expect to be able to use it =).*/class Registered{};namespace pps {namespace range {template<>struct traits<Registered>{	typedef int valueType;	typedef const int& constReference;	typedef int& reference;	typedef const int* constIterator;	typedef int* iterator;};}}int main(){	// Static assert, ok.//	PPS_TESTS_ASSERT(typeid(traits<int>::valueType) == typeid(int));	PPS_TESTS_ASSERT(typeid(traits<int*>::valueType) == typeid(int));	PPS_TESTS_ASSERT(typeid(traits<int*>::constReference) == typeid(const int&));	PPS_TESTS_ASSERT(typeid(traits<int*>::reference) == typeid(int&));	PPS_TESTS_ASSERT(typeid(traits<int*>::constIterator) == typeid(const int*));	PPS_TESTS_ASSERT(typeid(traits<int*>::iterator) == typeid(int*));	PPS_TESTS_ASSERT(typeid(traits<int[]>::valueType) == typeid(int));	PPS_TESTS_ASSERT(typeid(traits<int[]>::constReference) == typeid(const int&));	PPS_TESTS_ASSERT(typeid(traits<int[]>::reference) == typeid(int&));	PPS_TESTS_ASSERT(typeid(traits<int[]>::constIterator) == typeid(const int*));	PPS_TESTS_ASSERT(typeid(traits<int[]>::iterator) == typeid(int*));	PPS_TESTS_ASSERT(typeid(traits<int[20]>::valueType) == typeid(int));	PPS_TESTS_ASSERT(typeid(traits<int[20]>::constReference) == typeid(const int&));	PPS_TESTS_ASSERT(typeid(traits<int[20]>::reference) == typeid(int&));	PPS_TESTS_ASSERT(typeid(traits<int[20]>::constIterator) == typeid(const int*));	PPS_TESTS_ASSERT(typeid(traits<int[20]>::iterator) == typeid(int*));	PPS_TESTS_ASSERT(typeid(traits<std::vector<int>>::valueType) == typeid(std::vector<int>::value_type));	PPS_TESTS_ASSERT(typeid(traits<std::vector<int>>::constReference) == typeid(std::vector<int>::const_reference));	PPS_TESTS_ASSERT(typeid(traits<std::vector<int>>::reference) == typeid(std::vector<int>::reference));	PPS_TESTS_ASSERT(typeid(traits<std::vector<int>>::constIterator) == typeid(std::vector<int>::const_iterator));	PPS_TESTS_ASSERT(typeid(traits<std::vector<int>>::iterator) == typeid(std::vector<int>::iterator));	// Static assert, ok.//	PPS_TESTS_ASSERT(typeid(traits<NonRegistered>::valueType) == typeid(int));	PPS_TESTS_ASSERT(typeid(traits<Registered>::valueType) == typeid(int));	PPS_TESTS_ASSERT(typeid(traits<Registered>::constReference) == typeid(const int&));	PPS_TESTS_ASSERT(typeid(traits<Registered>::reference) == typeid(int&));	PPS_TESTS_ASSERT(typeid(traits<Registered>::constIterator) == typeid(const int*));	PPS_TESTS_ASSERT(typeid(traits<Registered>::iterator) == typeid(int*));	return 0;}