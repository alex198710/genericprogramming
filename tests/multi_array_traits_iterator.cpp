#include <typeinfo>#include <vector>#include "tests.h"#include "../multi_array_traits_iterator.h"using pps::multi_array::traits_iterator;namespace pps {namespace multi_array {template<class T>struct traits_iterator<std::vector<T>>{	typedef typename std::vector<T>::iterator type;};}}int main(){	PPS_TESTS_ASSERT(typeid(traits_iterator<int>::type) == typeid(int*));	PPS_TESTS_ASSERT(typeid(traits_iterator<int*>::type) == typeid(int**));	PPS_TESTS_ASSERT(typeid(traits_iterator<double**>::type) == typeid(double***));	PPS_TESTS_ASSERT(typeid(traits_iterator<int***>::type) == typeid(int****));	PPS_TESTS_ASSERT(typeid(traits_iterator<std::vector<int>>::type) == typeid(std::vector<int>::iterator));	PPS_TESTS_ASSERT(typeid(traits_iterator<std::vector<std::vector<double>>>::type) == typeid(std::vector<std::vector<double>>::iterator));	PPS_TESTS_ASSERT(typeid(traits_iterator<std::vector<int>*>::type) == typeid(std::vector<int>::iterator*));	PPS_TESTS_ASSERT(typeid(traits_iterator<std::vector<int>**>::type) == typeid(std::vector<int>::iterator**));	return 0;}