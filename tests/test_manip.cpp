#include <vector>#include <list>#include <typeinfo>#include "tests.h"#include "../include/pps/range/traits.h"#include "../include/pps/range/traitsBaseType.h"#include "../include/pps/range/begin.h"#include "../include/pps/range/end.h"using pps::range::traits;using pps::range::traitsBaseType;using pps::range::begin;using pps::range::end;int main(){	typedef std::list<std::vector<std::list<int>>> Range;	Range t1;	std::vector<std::list<int>> t11;	std::list<int> t111;	t111.push_back(2);	t111.push_back(7);	std::list<int> t112;	t112.push_back(5);	t112.push_back(6);	t11.push_back(t111);	t11.push_back(t112);	std::vector<std::list<int>> t12;	std::list<int> t121;	t121.push_back(2);	t121.push_back(7);	std::list<int> t122;	t122.push_back(5);	t122.push_back(6);	t12.push_back(t121);	t12.push_back(t122);	t1.push_back(t11);	t1.push_back(t12);	PPS_TESTS_ASSERT(typeid(traitsBaseType<Range, 3>::baseType) == typeid(int));	PPS_TESTS_ASSERT(typeid(traitsBaseType<Range, 2>::baseType) == typeid(std::list<int>));	PPS_TESTS_ASSERT(typeid(traitsBaseType<Range, 1>::baseType) == typeid(std::vector<std::list<int>>));	PPS_TESTS_ASSERT(typeid(traitsBaseType<Range, 0>::baseType) == typeid(std::list<std::vector<std::list<int>>>));	return 0;}