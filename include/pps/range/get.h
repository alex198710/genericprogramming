#ifndef PPS_RANGE_GET_H#define PPS_RANGE_GET_H#include "traits.h"#include "traitsBaseType.h"#include "begin.h"#include "end.h"namespace pps {namespace range {template<int N, class T, class Indexes>const typename traitsBaseType<T, N>::baseTypeget(const T& p_range, const Indexes& p_indexes){	typename traits<T>::constIterator itData(begin(p_range));	typename traits<Indexes>::constIterator itIndexes(begin(p_indexes));	for(std::size_t i = 0, endI = *itIndexes++ ; i < endI ; ++i)		++itData;	if(N == 0)		return *itData;	return get<N>(*itData, Indexes(itIndexes, end(p_indexes)));}template<int N, class T, class Indexes>typename traitsBaseType<T, N>::baseTypeget(T& p_range, const Indexes& p_indexes){	typename traits<T>::iterator itData(begin(p_range));	typename traits<Indexes>::constIterator itIndexes(begin(p_indexes));	for(std::size_t i = 0, endI = *itIndexes++ ; i < endI ; ++i)		++itData;	if(N == 0)		return *itData;	return get<N>(*itData, Indexes(itIndexes, end(p_indexes)));}}}#endif