#ifndef PPS_RANGE_VIEW_SUB_RANGE_H#define PPS_RANGE_VIEW_SUB_RANGE_H#include "viewSubRangeIterator.h"namespace pps {namespace range {class viewSubRange{	public:		typedef viewSubRangeIterator iterator;	private:		std::size_t m_begin;		std::size_t m_end;		std::size_t m_increment;	public:		viewSubRange(std::size_t p_size, std::size_t p_increment = 1);		viewSubRange(std::size_t p_begin, std::size_t p_end, std::size_t p_increment = 1);		viewSubRange(const viewSubRange& p_viewSubRange);		viewSubRange& operator=(const viewSubRange& p_viewSubRange);		iterator begin() const;		iterator end() const;};}}#include "traits.h"namespace pps {namespace range {// ---- Extends library to support viewSubRange as a rangetemplate<>struct traits<viewSubRange>{	typedef std::size_t valueType;	typedef const std::size_t& constReference;	typedef std::size_t& reference;	typedef typename viewSubRange::iterator constIterator;	typedef typename viewSubRange::iterator iterator;};}}#endif